
Polymorphism:
-------------

If a class exhibit many forms

 ->  Compile time Polymorphism(Static Binding)
       1)Overloading
           i)Method Overloading
           If a class contain same method name , same return type but with
                1)Differnt Number of Parameters 
                ii)If same number of Parameters , type of parameters should be different
                ii)or Order of parameteers s are diffrenrt

           ii)Constructor Overloading
 ->  Runtime time Polymorphism(Dynamic Binding)
       2)Overriding

 If we display message in different forms


 public class App {

	public void m1() {
		System.out.println("we are in m1");
	}
	
	public void m1() {
		System.out.println("we are in m1 1");
	}
	
	
	public static void main(String[] args) {
		
		App app = new App();
		app.m1();
		
	}
}


D:\JavaPrograms\Core_java\New folder>javac App.java
App.java:7: error: method m1() is already defined in class App
        public void m1() {
                    ^
1 error

            ^
App.java:14: error: method m1 in class App cannot be applied to given types;
                app.m1(false);
                   ^
  required: no arguments
  found:    boolean
  reason: actual and formal argument lists differ in length
2 errors

public class App {
	public void m1(double b) {
		System.out.println("double :" + b);
	}
	public void m1(int a) {
		System.out.println("int :" + a);
	}
	public void m1(int a , double b) {
		System.out.println("int :" + a);
	}
	public void m1(double  a , int b) {
		System.out.println("int :" + a);
	}
	public static void main(String[] args) {
		App app = new App();
		app.m1(10);
		app.m1(10.8);
	}
}


public class App {

	public void m1(int b) {
		System.out.println("double :" + b);
	}
	public void m1(int b , int c) {
		System.out.println("double :" + b);
	}
	public int m1(double  a) {
		return 10;
	}

	public static void main(String[] args) {
		App app = new App();
		app.m1(10);
		app.m1(10.8);
	}
}


public class App {


	public double m1(double  a) {
		return 10.8;
	}
	public int m1(int  a) {
		return 10;
	}
	public static void main(String[] args) {
		App app = new App();
		app.m1(10);
		app.m1(10.8);
	}
}



public class App {


	public int m1(double  a) {
		return 10;
	}
	public int m1(int  a) {
		return 10;
	}
	public static void main(String[] args) {
		App app = new App();
		app.m1(10);
		app.m1(10.8);
	}
}


public class Test {
	public Test(int a) {
		System.out.println(a);
	}
	public Test(double b) {
		System.out.println(b);
	}
	public Test(int a,int  b) {
		System.out.println(a+b);
	}
	public static void main(String[] args) {
		Test t = new Test(10,20);
	}
}


public class Test {
	static void m1(int a) {
		System.out.println(a);
	}
	static void m1() {
		System.out.println("we are in empty method m1");
	}
	public static void main(String[] args) {
		Test.m1();	
	}
}

public class Test {

	static void m1() {
		System.out.println("we are in empty method m1");
	}

	public static void main(String[] args) {
		Test.m1();
		Test.main(10);
	}
	
	public static void main(int args) {
		System.out.println("Both are not same");
	}
}
