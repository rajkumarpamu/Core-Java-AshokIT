
Throwable	getCause()
String	    getMessage()
void	    printStackTrace()


public class A {
	public static void main(String[] args) {
		System.out.println(10/1);

		try {
			String s= null;
        System.out.println(s.lastIndexOf(1));
		}
		catch (NullPointerException e) {
			System.out.println("Cause:"+e.getCause());
			System.out.println("Message:"+e.getMessage());
			System.out.println("Print Stack Trace");
			e.printStackTrace();
		}
        System.out.println(10/2);

	}
}


public class A {
	public static void main(String[] args) {
		System.out.println(10/1);

		try {
			System.out.println(10/0);
		}
		catch (Exception e) {
			System.out.println("Cause:"+e.getCause());
			System.out.println("Message:"+e.getMessage());
			System.out.println("Print Stack Trace");
			e.printStackTrace();
		}
        
        System.out.println(10/2);

	}
}



public class A {
	public static void main(String[] args) {
		System.out.println(10/1);

		try {
			System.out.println(10/0);
		}
		catch (ArithmeticException e) {
			
			throw new RuntimeException("Run time exception",e);
		}
        
        System.out.println(10/2);

	}
}

10
Exception in thread "main" java.lang.RuntimeException: Run time exception
	at A.main(A.java:11)
Caused by: java.lang.ArithmeticException: / by zero
	at A.main(A.java:7)

public class A {
	public static void main(String[] args) {
		System.out.println(10/1);

		try {
			System.out.println(10/0);
		}
		catch (ArithmeticException e) {
			
			try {
			throw new RuntimeException("Run time exception",e);
			}
			catch(Exception e1) {
				e1.printStackTrace();
			}
		}
        
        System.out.println(10/2);

	}
}



public class A {
	public static void main(String[] args) {
		System.out.println(10 / 1);

		try {
			System.out.println(10 / 0);
		} catch (ArithmeticException e) {

			try {
				String s=null;
				if(s!= null) {
					System.out.println(s.length());
				}
				else {
				throw new RuntimeException("Value is nul1", e);
				}
			} catch (Exception e1) {
				e1.printStackTrace();
			}
		}

		System.out.println(10 / 2);

	}
}


java.lang.ArithmeticException: / by zero
	in.ashokit.LoginServlet.doPost(LoginServlet.java:61)
	javax.servlet.http.HttpServlet.service(HttpServlet.java:555)
	javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)

throw:
------

to explicitly throw our own exception we will throw using throw keyword

Syntax:

throw <Exception Object>;

public class A {
	public static void main(String[] args) {
		System.out.println(10 / 1);

		int div = 0;
		try {
			if (div != 0) {
				System.out.println(10 / div);
			}
			else {
				ArithmeticException e = new ArithmeticException("INput is 0");
				throw e;
			}
		} catch (ArithmeticException e) {
         System.out.println(e.getMessage());
		}

	}
}

10
INput is 0



public class A {
	public static void main(String[] args) {
		System.out.println(10 / 1);

		int div = 0;
		try {
			if (div != 0) {
				System.out.println(10 / div);
			}
			else {
				ArithmeticException e = new ArithmeticException("INput is 0");
				throw e;
			}
		} catch (ArithmeticException ex) {
            throw ex;
		}

		System.out.println("Last line");
	}
}

10
Exception in thread "main" java.lang.ArithmeticException: INput is 0
	at A.main(A.java:12)



public class A {
	public static void main(String[] args) {
		System.out.println(10 / 1);

		int div = 0;
		try {
			if (div != 0) {
				System.out.println(10 / div);
			}
			else {
				ArithmeticException e = new ArithmeticException("INput is 0");
				throw e;
			}
		} catch (ArithmeticException ex) {
           // throw ex;
		}

		System.out.println("Last line");
	}
}

Result:
-------
10
Last line

Custom exception:
----------------

public class AgeNotValidException extends RuntimeException {



	String message;

	public AgeNotValidException(String message) {
		this.message = message;
	}

	
	@Override
	public String toString() {
		return "AgeNotValidException [message=" + message + "]";
	}
}




public class A {
	
	public void validateAge(int age) {
		
		if(age>18) {
			System.out.println("Proceed Next");
		}
		else{
			throw new AgeNotValidException("Age is not valid");
		}
		
	}
	public static void main(String[] args) {
		
		A a = new A();
		
		try {
		a.validateAge(0);
		}
		catch (AgeNotValidException e) {			
			e.printStackTrace();
			
		}
	}
}

