package com.demo.loops;

public class Thread3 implements Runnable{
	
	@Override
	public void run() {
		//Returns a reference to the currently executing thread object.
		System.out.println(Thread.currentThread());
		
	}
	
	public static void main(String[] args) {
		
		Thread3 thread3 = new Thread3();
		Thread thread = new Thread(thread3);
		thread.start();
		
	}

}


Thread[Thread-0,5,main]

Thread[Thread-0,5,main]
Thread[Thread-1,5,main]



package com.demo.loops;

public class Thread3 implements Runnable {

	@Override
	public void run() {
		// Returns a reference to the currently executing thread object.
		Thread t1 = Thread.currentThread();
		System.out.println(t1);
		System.out.println("Name :"+t1.getName());
		System.out.println("Pripority "+t1.getPriority());
		System.out.println("Group :"+t1.getThreadGroup());
	}

	public static void main(String[] args) {

		ThreadGroup group = new ThreadGroup("MyGroup");
		Thread3 thread3 = new Thread3();
		Thread thread = new Thread(group,thread3);
		Thread thread1 = new Thread(group,thread3);

		thread.setName("Raj-1");
		thread.setPriority(10);
		
		thread1.setName("Raj-2");
		thread1.setPriority(10);
	    
		thread.start();
		thread1.start();
	
	}

}



wait()  notify()
synchronization



package com.demo.loops;
public class Thread1 implements Runnable {

	public static Thread thread1;
	public static Thread1 obj;

	public static void main(String[] args)
	{
		//Create an object to user defined class
		 obj = new Thread1();
		 //Attach to main thread
		 thread1 = new Thread(obj);

		 //NEW
		System.out.println(
			"State of thread1 after creating it - "
			+ thread1.getState());
		
		thread1.start();

		//RUNNABLE
		System.out.println(
			"State of thread1 after calling .start() method on it - "
			+ thread1.getState());
	}

	@Override
	public void run()
	{
		Thread2 myThread = new Thread2();
		Thread thread2 = new Thread(myThread);

		System.out.println(
			"State of thread2 after creating it - "
			+ thread2.getState());
		
		thread2.start();

		System.out.println(
			"State of thread2 after calling .start() method on it - "
			+ thread2.getState());
		try {
			//Thread2
			Thread.sleep(200);
		}
		catch (InterruptedException e) {
			e.printStackTrace();
		}
		System.out.println(
			"State of thread2 after calling .sleep() method on it - "
			+ thread2.getState());

		try {
			thread2.join();
		}
		catch (InterruptedException e) {
			e.printStackTrace();
		}
		System.out.println(
			"State of thread2 when it has finished it's execution - "
			+ thread2.getState());
	}
}


package com.demo.loops;
class Thread2 implements Runnable {
	public void run()
	{
		try {
			Thread.sleep(1500);
		}
		catch (InterruptedException e) {
			e.printStackTrace();
		}

		System.out.println(
			"State of thread1 while it called join() method on thread2 -"
			+ Thread1.thread1.getState());
		
		try {
			Thread.sleep(200);
		}
		catch (InterruptedException e) {
			e.printStackTrace();
		}
		System.out.println("End of thread-1");
	}
	
	
}


package com.demo.loops;

public class UserThread extends Thread {

	@Override
	public void run() {
		for (int i = 0; i <= 5; i++) {
			try {
				Thread.sleep(100);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			System.out.println(Thread.currentThread().toString() + i);
		}

	}

	public static void main(String[] args) {

		UserThread thread1 = new UserThread();
		Thread t1 = new Thread(thread1);
		
		UserThread thread2 = new UserThread();
		Thread t2 = new Thread(thread2);
		t1.start();
		try {
			Thread.sleep(100);
		} catch (InterruptedException e1) {
			e1.printStackTrace();
		}
		try {
			t1.join();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		t2.start();
	}

}

