Set:
---
Remove Duplicate

Employee
Set<Employee> set = new TreeSet<Employee>();
set.add(new Employee(1))
set.add(new Employee(1));

1)hascode() and equals()
2)Implements Comparable compareTo();
sysout(set)


public int compareTo(T o) {
		Employee emp = (Employee)o;
		if(empid>emp.empid) {
			return 1;
		}
		else if(empid<emp.empid) {
			return -1;
		}
		else {
			return 0;
		}
	};

Exception in thread "main" java.lang.ClassCastException: demo.collections.Employee cannot be cast to java.lang.Comparable
	at java.util.TreeMap.compare(TreeMap.java:1294)
	at java.util.TreeMap.put(TreeMap.java:538)
	at java.util.TreeSet.add(TreeSet.java:255)
	at demo.collections.ListDemo.main(ListDemo.java:10)

Comparator:
---------


package demo.collections;

import java.util.Objects;

public class Employee {

	Integer empid;
	String name;
	Integer age;

	public Employee(Integer empid, String name, Integer age) {
		super();
		this.empid = empid;
		this.name = name;
		this.age = age;
	}


	@Override
	public String toString() {
		return "Employee [empid=" + empid + ", name=" + name + ", age=" + age + "]";
	}


}


Age :[Employee [empid=2, name=raj, age=23], Employee [empid=4, name=raj, age=29], Employee [empid=1, name=raj, age=30], Employee [empid=3, name=raj, age=31], Employee [empid=1, name=raj, age=33]]
Id :[Employee [empid=1, name=raj, age=30], Employee [empid=1, name=raj, age=33], Employee [empid=2, name=raj, age=23], Employee [empid=3, name=raj, age=31], Employee [empid=4, name=raj, age=29]]
[Employee [empid=1, name=raj, age=30], Employee [empid=1, name=raj, age=33], Employee [empid=2, name=raj, age=23], Employee [empid=3, name=raj, age=31], Employee [empid=4, name=raj, age=29]]


package demo.collections;

import java.util.Comparator;

public class EmpIDComparator implements Comparator<Employee> {

	public int compare(Employee o1, Employee o2) {
		if (o1.empid > o2.empid) {
			return 1;
		} else if (o1.empid < o2.empid) {
			return -1;
		} else {
			return 0;
		}
	};

}


package demo.collections;

import java.util.Comparator;

public class AgeComparator implements Comparator<Employee> {
	public int compare(Employee o1, Employee o2) {
		if (o1.age > o2.age) {
			return 1;
		} else if (o1.age < o2.age) {
			return -1;
		} else {
			return 0;
		}
	};
}


package demo.collections;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

public class ListDemo {
	public static void main(String[] args) {
		List<Employee> list1 = new ArrayList();
		list1.add(new Employee(1, "raj", 30));
		list1.add(new Employee(4, "raj", 29));
		list1.add(new Employee(3, "raj", 31));
		list1.add(new Employee(2, "raj", 23));
		list1.add(new Employee(1, "raj", 33));
		
	    Collections.sort(list1,new AgeComparator());
	    System.out.println("Age :"+list1);
	    
	    Collections.sort(list1,new EmpIDComparator());
	    System.out.println("Id :"+list1);
	   
		
	}

}

If we want our own comparision sequnce , we have to Comprataor class and suplly the comparator object as a arguement

Collections.sort(list1,new AgeComparator());
	    System.out.println("Age :"+list1);

Collections.sort(list1,new EmpIDComparator());
	    System.out.println("Id :"+list1);


Comparable:
------------
1)It will provide only single sorting sequence

2)Comprable effect the original class ie actual class is getting modifed when we make changes in the sorting mechanisim

3)Implements Comparable
Override compareTo() method

4)java.lang

5)Collections.sort(list);

Comparator:
-----------

It will provide multiple sorting sequence

Ex: AgeComparator
    IDComprataor

If we modify AgeComparator it will not effect th original Object, actual class is not modified.

Collections.sort(list,comparator())


java.util
Implemenets Comparator


Age :[Employee [empid=2, name=raj, age=23], Employee [empid=4, name=raj, age=29], Employee [empid=1, name=raj, age=30], Employee [empid=3, name=raj, age=31], Employee [empid=1, name=raj, age=33]]
Id :[Employee [empid=1, name=raj, age=30], Employee [empid=1, name=raj, age=33], Employee [empid=2, name=raj, age=23], Employee [empid=3, name=raj, age=31], Employee [empid=4, name=raj, age=29]]
[Employee [empid=1, name=raj, age=30], Employee [empid=1, name=raj, age=33], Employee [empid=2, name=raj, age=23], Employee [empid=3, name=raj, age=31], Employee [empid=4, name=raj, age=29]]



Age :[Employee [empid=2, name=raj, age=23], Employee [empid=4, name=raj, age=29], Employee [empid=1, name=raj, age=30], Employee [empid=3, name=raj, age=31], Employee [empid=1, name=raj, age=33]]
Id :[Employee [empid=1, name=raj, age=30], Employee [empid=1, name=raj, age=33], Employee [empid=2, name=raj, age=23], Employee [empid=3, name=raj, age=31], Employee [empid=4, name=raj, age=29]]
Name :[Employee [empid=1, name=raj, age=30], Employee [empid=1, name=raj, age=33], Employee [empid=2, name=raj, age=23], Employee [empid=3, name=raj, age=31], Employee [empid=4, name=raj, age=29]]


Age :[Employee [empid=2, name=rahul, age=23], Employee [empid=4, name=raju, age=29], Employee [empid=1, name=raj, age=30], Employee [empid=3, name=ravi, age=31], Employee [empid=1, name=ramu, age=33]]
Id :[Employee [empid=1, name=raj, age=30], Employee [empid=1, name=ramu, age=33], Employee [empid=2, name=rahul, age=23], Employee [empid=3, name=ravi, age=31], Employee [empid=4, name=raju, age=29]]

Name :[Employee [empid=2, name=rahul, age=23], Employee [empid=1, name=raj, age=30], Employee [empid=4, name=raju, age=29], Employee [empid=1, name=ramu, age=33], Employee [empid=3, name=ravi, age=31]]



package demo.collections;

import java.util.Comparator;

public class NameComparator implements Comparator<Employee> {
@Override
public int compare(Employee o1, Employee o2) {

	return o1.name.compareTo(o2.name);
}
}
