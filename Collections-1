Collections:
-----------

Arrays:
-------

 = 

Array Dec
datatype var[];

Array Creation
new datatype[size];

Array 

var[index]= value;


datatype var[] = {10,20,30};



package demo.collections;

public class ArraysDemo {
	
	public static void main(String[] args) {
		
		int marks[] ;
		
		marks=new int[5];
		
		System.out.println("Before Initailzation");
		for(int i=0;i<marks.length;i++) {
			System.out.println(marks[i]+" ");
		}
		
		marks[0]=40;
		marks[1]=60;
		marks[2]=70;
		marks[3]=70;
		marks[4]=80;
		System.out.println("After Intiatlization");
		for(int i=0;i<marks.length;i++) {
			System.out.println(marks[i]+" ");
		}
	}

}


package demo.collections;

public class ArraysDemo {
	
	public static void main(String[] args) {
		
		
	  int marks[]= {10,20,30,40,50};
	  
	  for(int i=0;i<marks.length;i++) {
		  System.out.println(marks[i]);
	  }
		
		
	}

}


Employee


package demo.collections;

public class ArraysDemo {
	
	public static void main(String[] args) {
		
		
     Employee emp[]=new Employee[3];
     emp[0]= new Employee("1", "raj");
     emp[1]= new Employee("2", "kumar");
     emp[2]= new Employee("3", "ravi");
     
      for(int i=0;i<emp.length;i++) {
    	  System.out.println(emp[i]);
      }
		
		
	}

}


package demo.collections;

public class ArraysDemo {
	
	public static void main(String[] args) {
		
		 
     Object emp[]=new Object[3];
     emp[0]= new Employee("1", "raj");
     emp[1]= new Employee("2", "kumar");
     emp[2]= new String("sachin");
     
      for(int i=0;i<emp.length;i++) {
    	  System.out.println(emp[i]);
      }
		
		
	}

}


package demo.collections;

public class ArraysDemo {
	
	public static void main(String[] args) {
		
		 
     Object emp[]=new Object[3];
     emp[0]= new Employee(new Integer(10), "raj");
     emp[1]= new Employee(new Integer(10), "kumar");
     emp[2]= new String("sachin");
     
      for(int i=0;i<emp.length;i++) {
    	  System.out.println(emp[i]);
      }
		
		
	}

}



Size is Mandatory
Waste of memory
Limited Size

Exception in thread "main" java.lang.OutOfMemoryError: Requested array size exceeds VM limit
	at demo.collections.ArraysDemo.main(ArraysDemo.java:8)



Collection Framework:
--------------------

Storing group of individual Objects in a single Object.
Underlying Data structures


Contains the collections framework, legacy collection classes

The root interface in the collection hierarchy. A collection represents a group of objects, known as its elements. 
Some collections allow duplicate elements and others do not. 
Some are ordered and others unordered. 
The JDK does not provide any direct implementations of this interface: 
it provides implementations of more specific subinterfaces like Set and List. This interface is typically used to pass collections around and manipulate them where maximum generality is desired.

List:
-----
ArrayList
CopyOnWriteArrayList - Concurrenct Collections
LinkedList
Stack,
Vector

Set:
----
ConcurrentHashMap.KeySetView,CopyOnWriteArraySet
HashSet
LinkedHashSet, 
TreeSet





